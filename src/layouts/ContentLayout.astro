---
import BaseLayout from './BaseLayout.astro';
import BlogHeader from '@coms/BlogHeader.astro';
import BlogPost from '@coms/BlogPost.astro';
import Author from '@coms/Author.astro';
import {parse} from 'node-html-parser';
import BlogComment from '@coms/BlogComment.astro';
import BlogViews from '@coms/BlogViews';
import type {PostInstance} from '@types';
import config from '../../blog.config.js';
import type {MarkdownHeading} from 'astro';

const {frontmatter, ...props} = Astro.props as PostInstance;
const {pathname} = Astro.url;
const {title, description, publishDate, heroImage, heroImageSrc, tags} = frontmatter;

// 목차 (h1, h2, h3 까지만 추출)
// Astro에서 제공하는 headings는 마크다운 문법 기준으로만 추출되고 html 태그는 추출되지 않아 따로 구현함.
// console.log(Astro.props);
const headings: MarkdownHeading[] = Astro.props.headings;
//  parse((await props) || '')
//   .querySelectorAll('h1, h2, h3')
//   .map(el => ({depth: Number(el.rawTagName[1]), slug: el.id || '', text: el.textContent}));
---

<BaseLayout seo={{title: title, description: description}} config={config}>
  <main class='w-full'>
    <div class='max-w-3xl w-full mx-auto px-4 md:px-3 lg:px-0'>
      <BlogHeader config={config} />
      <BlogPost
        title={title}
        publishDate={publishDate}
        locale={config.locale.languageCode}
        tags={tags}
        description={description}
        heroImage={heroImageSrc}
        headings={headings}
      >
        <!-- {headers && headers.length !== 0 &&
				<BlogToc contents={headers} />} -->

        <slot />
      </BlogPost>
      <div class=''>
        <BlogViews client:load namespace={config.baseurl} key={decodeURI(pathname)} />
      </div>
      <Author avatar={config.avatar} name={config.author.name} href='/' description={config.author.comment} />
      <BlogComment comments={config.comments} theme={config.theme} />
    </div>
  </main>
</BaseLayout>
